import asyncio
import logging
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import aiohttp
from keyboards import *

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

DASHBOARD_URL = os.getenv("DASHBOARD_URL", "http://78.85.36.187:8050")
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_URL = os.getenv("API_URL", "http://backend:8000")

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class ExpenseStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_category = State()
    waiting_for_description = State()

class IncomeStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_source = State()

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å —ç–º–æ–¥–∑–∏
EXPENSE_CATEGORIES = {
    "üçî –ï–¥–∞": "–ï–¥–∞",
    "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
    "üè† –ñ–∏–ª—å–µ": "–ñ–∏–ª—å–µ",
    "üé¨ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
    "üëï –û–¥–µ–∂–¥–∞": "–û–¥–µ–∂–¥–∞",
    "üíä –ó–¥–æ—Ä–æ–≤—å–µ": "–ó–¥–æ—Ä–æ–≤—å–µ",
    "üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
    "üéÅ –ü–æ–¥–∞—Ä–∫–∏": "–ü–æ–¥–∞—Ä–∫–∏",
    "üí∞ –î—Ä—É–≥–æ–µ": "–î—Ä—É–≥–æ–µ"
}

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å—ã üí∞\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üí∏ /expense - –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n"
        "üíµ /income - –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥\n"
        "üìä /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "üíº /balance - –ë–∞–ª–∞–Ω—Å\n"
        "üìà /report - –û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ! ‚¨áÔ∏è",
        reply_markup=get_main_keyboard()
    )

@dp.message(Command("expense"))
@dp.message(F.text == "üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
async def cmd_expense(message: Message, state: FSMContext):
    await state.set_state(ExpenseStates.waiting_for_amount)
    await message.answer(
        "üí∞ –í–≤–µ–¥–∏ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 500 –∏–ª–∏ 1250.50",
        reply_markup=get_cancel_keyboard()
    )

@dp.message(ExpenseStates.waiting_for_amount)
async def process_expense_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
        if amount <= 0:
            raise ValueError
        
        await state.update_data(amount=amount)
        await state.set_state(ExpenseStates.waiting_for_category)
        await message.answer(
            f"‚úÖ –°—É–º–º–∞: {amount} —Ä—É–±.\n\n"
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=get_category_keyboard()
        )
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 500 –∏–ª–∏ 1250.50"
        )

@dp.message(ExpenseStates.waiting_for_category)
async def process_expense_category(message: Message, state: FSMContext):
    category = EXPENSE_CATEGORIES.get(message.text, message.text)
    await state.update_data(category=category)
    await state.set_state(ExpenseStates.waiting_for_description)
    await message.answer(
        f"üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
        "–î–æ–±–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=get_skip_keyboard()
    )

@dp.message(ExpenseStates.waiting_for_description)
async def process_expense_description(message: Message, state: FSMContext):
    data = await state.get_data()
    description = None if message.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else message.text
    
    async with aiohttp.ClientSession() as session:
        payload = {
            "user_id": message.from_user.id,
            "amount": data['amount'],
            "category": data['category'],
            "description": description,
            "date": datetime.now().date().isoformat()
        }
        
        try:
            async with session.post(f"{API_URL}/expenses/", json=payload) as resp:
                if resp.status == 200:
                    await message.answer(
                        "‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                        f"üí∞ –°—É–º–º–∞: {data['amount']} —Ä—É–±.\n"
                        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description or '–ù–µ—Ç'}",
                        reply_markup=get_main_keyboard()
                    )
                else:
                    await message.answer(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞",
                        reply_markup=get_main_keyboard()
                    )
        except Exception as e:
            logger.error(f"Error saving expense: {e}")
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
                reply_markup=get_main_keyboard()
            )
    
    await state.clear()

@dp.message(Command("income"))
@dp.message(F.text == "üíµ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")
async def cmd_income(message: Message, state: FSMContext):
    await state.set_state(IncomeStates.waiting_for_amount)
    await message.answer(
        "üíµ –í–≤–µ–¥–∏ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 50000",
        reply_markup=get_cancel_keyboard()
    )

@dp.message(IncomeStates.waiting_for_amount)
async def process_income_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
        if amount <= 0:
            raise ValueError
        
        await state.update_data(amount=amount)
        await state.set_state(IncomeStates.waiting_for_source)
        await message.answer(
            f"‚úÖ –°—É–º–º–∞: {amount} —Ä—É–±.\n\n"
            "–í—ã–±–µ—Ä–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞:",
            reply_markup=get_income_source_keyboard()
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")

@dp.message(IncomeStates.waiting_for_source)
async def process_income_source(message: Message, state: FSMContext):
    data = await state.get_data()
    source = message.text
    
    async with aiohttp.ClientSession() as session:
        payload = {
            "user_id": message.from_user.id,
            "amount": data['amount'],
            "source": source,
            "date": datetime.now().date().isoformat()
        }
        
        try:
            async with session.post(f"{API_URL}/income/", json=payload) as resp:
                if resp.status == 200:
                    await message.answer(
                        "‚úÖ –î–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                        f"üíµ –°—É–º–º–∞: {data['amount']} —Ä—É–±.\n"
                        f"üìÇ –ò—Å—Ç–æ—á–Ω–∏–∫: {source}",
                        reply_markup=get_main_keyboard()
                    )
                else:
                    await message.answer(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–∞",
                        reply_markup=get_main_keyboard()
                    )
        except Exception as e:
            logger.error(f"Error saving income: {e}")
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
                reply_markup=get_main_keyboard()
            )
    
    await state.clear()

@dp.message(Command("stats"))
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def cmd_stats(message: Message):
    user_id = message.from_user.id
    
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(f"{API_URL}/stats/summary/?user_id={user_id}") as resp:
                summary = await resp.json()
            
            async with session.get(f"{API_URL}/stats/by-category/?user_id={user_id}&days=30") as resp:
                by_category = await resp.json()
            
            stats_text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤**\n\n"
            stats_text += f"üìÖ –°–µ–≥–æ–¥–Ω—è: {summary['today']:.2f} —Ä—É–±.\n"
            stats_text += f"üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é: {summary['week']:.2f} —Ä—É–±.\n"
            stats_text += f"üìÖ –ó–∞ –º–µ—Å—è—Ü: {summary['month']:.2f} —Ä—É–±.\n\n"
            
            if by_category:
                stats_text += "üìÇ **–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (30 –¥–Ω–µ–π):**\n"
                for cat in sorted(by_category, key=lambda x: x['total'], reverse=True)[:5]:
                    stats_text += f"‚Ä¢ {cat['category']}: {cat['total']:.2f} —Ä—É–±.\n"
            
            await message.answer(stats_text, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"Error getting stats: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@dp.message(Command("balance"))
@dp.message(F.text == "üíº –ë–∞–ª–∞–Ω—Å")
async def cmd_balance(message: Message):
    user_id = message.from_user.id
    
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(f"{API_URL}/balance/?user_id={user_id}") as resp:
                balance_data = await resp.json()
            
            balance_text = "üíº **–ë–∞–ª–∞–Ω—Å**\n\n"
            balance_text += f"üíµ –î–æ—Ö–æ–¥—ã: {balance_data['income']:.2f} —Ä—É–±.\n"
            balance_text += f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {balance_data['expenses']:.2f} —Ä—É–±.\n"
            balance_text += f"{'üí∞' if balance_data['balance'] >= 0 else '‚ö†Ô∏è'} –û—Å—Ç–∞—Ç–æ–∫: {balance_data['balance']:.2f} —Ä—É–±."
            
            await message.answer(balance_text, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"Error getting balance: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")

@dp.message(Command("report"))
@dp.message(F.text == "üìà –î–∞—à–±–æ—Ä–¥")
async def cmd_report(message: Message):
    dashboard_url = os.getenv("DASHBOARD_URL", "http://localhost:8050")
    await message.answer(
        f"üìä –û—Ç–∫—Ä–æ–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:\n\n"
        f"üîó {dashboard_url}?user_id={message.from_user.id}\n\n"
        f"–ù–∞ –¥–∞—à–±–æ—Ä–¥–µ —Ç—ã —É–≤–∏–¥–∏—à—å:\n"
        f"‚Ä¢ üìä –ì—Ä–∞—Ñ–∏–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
        f"‚Ä¢ üìà –î–∏–Ω–∞–º–∏–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –¥–Ω—è–º\n"
        f"‚Ä¢ ü´ß Bubble chart —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è\n"
        f"‚Ä¢ üìâ –¢—Ä–µ–Ω–¥—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã\n"
        f"‚Ä¢ üîÑ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!"
    )

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_main_keyboard()
    )

async def main():
    logger.info("Starting bot...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
